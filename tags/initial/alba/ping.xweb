

<!-- The Ping task -->
<section id="ping-task">
<title>The Ping Task</title>

<simpara>The ping task is a simple process that sends periodic ping messages
to the IRC server, causing the server to respond and verifying that the link
is still functional.  In &pprog;, the absence of these ping responses will be
used to restart the server link.  In &prog;, it simply submits its messages to
the output queue.</simpara>

<section>
<title>Ping Loop</title>
<para>
The heart of the ping task is an endless loop, which delays a certain amount
of time, then places a message on the output queue.

<src:fragment id="ping-loop">
      loop
         delay Ping_Delay;
         Output_Request.Operation := Output.Output_Operation;
         Output_Request.Data := To_Unbounded_String ("Ping after" &amp; Duration'Image (Ping_Delay) &amp; " seconds");
         Output.Requests.Enqueue (Output_Request);
      end loop;
</src:fragment>

The task spends most of its time sitting on the <command>delay</command>
statement, waiting for the interval to expire.  The loop is terminated when
the task is aborted by the command task, when it recognizes a
<quote>quit</quote> command.
</para>

<simpara>The <methodname>Duration'Image</methodname> attribute produces a
human-readable form of the ping duration value, which is rather ugly, having a
huge number of decimal places by default.  But the alternative (using the
standard generic package <classname>Ada.Text_IO.Fixed_IO</classname> to format
the value into a string variable) would unnecessarily complicate the code, so
this method was deemed acceptable.</simpara>
</section>

<section>
<title>Ping Task Declarations</title>

<para>
The ping loop uses these two variables:

<itemizedlist>
<listitem>
<simpara><literal>Ping_Delay</literal> - A statically initialized variable
giving the length of the delay interval in seconds.</simpara>
</listitem>

<listitem>
<simpara><literal>Output_Request</literal> - The request variable to be placed
on the output task's request queue.  Its value is set to a predefined string.
In &pprog;, it would be a valid IRC <quote>ping</quote> message.</simpara>
</listitem>
</itemizedlist>

<src:fragment id="ping-decls">
      Ping_Delay:  Duration := 60.0;

      Output_Request:  Output.Request_Rec;
</src:fragment>

In &prog;, <literal>Ping_Delay</literal> is set to one minute, so as not to
clutter the output with too many ping messages.  Presumably it will be shorter
in &pprog;.
</para>
</section>

<section>
<title>Ping Task Body</title>
<para>
The task's body contains only the processing loop, and its required
declarations.

<src:fragment id="ping-task-body">
   task body Ping_Task_Type is
<src:fragref linkend="ping-decls"/>
   begin  -- Ping_Task_Type
<src:fragref linkend="ping-loop"/>
   end Ping_Task_Type;
</src:fragment>
</para>
</section>

<section>
<title>Ping Task Package</title>
<para>
For compilation purposes, the task is contained in a package.  The task is its
only content, since no other packages depend on it.  The external dependencies
are:

<itemizedlist>
<listitem>
<simpara><classname>Ada.Strings.Unbounded</classname> - Provides the function
<methodname>To_Unbounded_String</methodname>, used to convert the fixed-length
ping message to the unbounded-string format required by the command
task.</simpara>
</listitem>

<listitem>
<simpara><classname>Output</classname> - The output task's package, which
provides the data type for the output-task queue requests, and the
<methodname>Enqueue</methodname> procedure, which adds the request to the
output request queue.</simpara>
</listitem>
</itemizedlist>

Visibility is provided to the standard library package via a
<command>use</command> clause; references to items declared in the
<classname>Output</classname> package must be fully qualified.

<src:fragment id="ping-pkg-body">
with
   Ada.Strings.Unbounded,
   Output;

use
   Ada.Strings.Unbounded;

package body Ping is
<src:fragref linkend="ping-task-body"/>
end Ping;
</src:fragment>
</para>

<para>
The ping task's package spec is similar to that of <link
linkend="ping-task">the ping task</link>; they are both a little different
from the specs of the other task packages.  Since the command task needs to be
able to abort the ping task when a <quote>quit</quote> command is processed,
it needs a way to identify the ping task to the <command>abort</command>
statement.  Thus the ping and input task package's specs declare a task type,
and a variable of that type, instead of the anonymous task types of most of
the other tasks.

<src:fragment id="ping-pkg-spec">
package Ping is
   task type Ping_Task_Type;
   Ping_Task:  Ping_Task_Type;
end Ping;
</src:fragment>
</para>
</section>
</section>
