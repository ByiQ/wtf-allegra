<?xml version="1.0" standalone="no"?>
<!DOCTYPE xweb PUBLIC "-//NDW-WMR//DTD DocBook XML V4.1.2-based Extension XWeb V1.0//EN"
                      "file:///opt/litprog/dtd/xweb.dtd" [
<!ENTITY % entities SYSTEM "entities.inc.dtd">
%entities;
]>

<article xmlns:src="http://nwalsh.com/xmlns/litprog/fragment"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<!-- Article meta-data -->
<articleinfo>
<title>&prog; Periodic Ping Package</title>

<author>
<firstname>Chip</firstname>
<surname>Richards</surname>
</author>

<address><email>chipr@niestu.com</email></address>
<publisher>
<publishername>NiEstu</publishername>
<address><otheraddr><ulink url="&site;/allegra/"></ulink></otheraddr></address>
</publisher>

<releaseinfo>Version 1.0</releaseinfo>
<date>30 December 2003</date>

<legalnotice>
<para>This code is released under the terms of the <ulink
url="http://www.gnu.org/licenses/gpl.html">GNU General Public License</ulink>,
version 2.</para>
</legalnotice>
</articleinfo>


<!-- The Ping task -->
<section id="ping-task">
<title>The Ping Task</title>

<para>The ping task is a simple process that sends periodic ping messages
to the IRC server, causing the server to respond and verifying that the link
is still functional.  In &prog;, the absence of these ping responses will be
used to restart the server link.  In &prog;, it simply submits its messages to
the output queue.</para>

<section>
<title>Ping Loop</title>
<para>
The heart of the ping task is an endless loop, which waits a certain amount of
time for the command task to signal that some input has been received.  If
such a signal is received before the end of the waiting interval, the task
notes that fact by resetting its <quote>missed-input</quote> counter to zero,
and then begins waiting again.  If no such signal is received before the
interval has passed, it checks to see if too many such timeouts have occurred.
If so, it sends one sort of message, which represents the action in &prog; of
resetting the link to the server.  If not, it increments its counter, sends a
ping message (in this simulator, simply by placing a different sort of message
on the output queue) and waits again.

<src:fragment id="ping-loop">
      loop
         select
            accept Input_Received;
               Missed := 0;
         or
            delay Ping_Delay;
            Missed := Missed + 1;
            if Missed >= Max_Missed_Pings then
               Put_Line ("Link timed out after " &amp;
                         Duration'Image (Ping_Delay * Duration (Missed)) &amp; " seconds");
               IRC.Close_Server;
               Missed := 0;
            else
               Output_Request.Operation := Output.Ping_Operation;
               Output_Request.Data := To_Unbounded_String (":" &amp; Config.Get_Value (Config.Item_Host));
               Output.Requests.Enqueue (Output_Request);
            end if;
         end select;
      end loop;
</src:fragment>

The task spends most of its time sitting on the <command>delay</command>
statement, waiting for the interval to expire.  The loop is terminated when
the task is aborted by the command task, when it recognizes a
<quote>quit</quote> command.
</para>

<para>The <methodname>Duration'Image</methodname> attribute produces a
human-readable form of the ping duration value, which is rather ugly, having a
huge number of decimal places by default.  But the alternative (using the
standard generic package <classname>Ada.Text_IO.Fixed_IO</classname> to format
the value into a string variable) would unnecessarily complicate the code, so
this method was deemed acceptable.</para>
</section>

<section>
<title>Ping Task Declarations</title>

<para>
The ping loop uses these constants and variables:

<itemizedlist>
<listitem>
<para><varname>Max_Missed_Pings</varname> - A constant giving the maximum
number of timeouts that are allowed before the link is considered
<quote>dead</quote>.</para>
</listitem>

<listitem>
<para><varname>Ping_Delay</varname> - A statically initialized variable
giving the length of the delay interval in seconds.</para>
</listitem>

<listitem>
<para><varname>Missed</varname> - A statically initialized variable which
counts the number of delay intervals which have passed without receiving any
input.</para>
</listitem>

<listitem>
<para><varname>Output_Request</varname> - The request variable to be placed
on the output task's request queue.  Its value is set to a predefined string.
In &prog;, it would be a valid IRC <quote>ping</quote> message.</para>
</listitem>
</itemizedlist>

<src:fragment id="ping-decls">
      Max_Missed_Pings: constant := 2;
      Ping_Delay:  Duration := 120.0;

      Missed: natural := 0;
      Output_Request:  Output.Request_Rec;
</src:fragment>

In &prog;, <literal>Ping_Delay</literal> is set to one minute, so as not to
clutter the output with too many ping messages.  Presumably it will be shorter
in &prog;.
</para>
</section>

<section>
<title>Ping Task Body</title>
<para>
The task's body contains only the processing loop, and its required
declarations.

<src:fragment id="ping-task-body">
   task body Ping_Task_Type is
<src:fragref linkend="ping-decls"/>
   begin  -- Ping_Task_Type
<src:fragref linkend="ping-loop"/>
   end Ping_Task_Type;
</src:fragment>
</para>
</section>

<section>
<title>Ping Task Package</title>
<para>
For compilation purposes, the task is contained in a package.  The task is its
only content, since no other packages depend on it.  The external dependencies
are:

<itemizedlist>
<listitem>
<para><classname>Ada.Strings.Unbounded</classname> - Provides the function
<methodname>To_Unbounded_String</methodname>, used to convert the fixed-length
ping message to the unbounded-string format required by the command
task.</para>
</listitem>

<listitem>
<para><classname>Output</classname> - The output task's package, which
provides the data type for the output-task queue requests, and the
<methodname>Enqueue</methodname> procedure, which adds the request to the
output request queue.</para>
</listitem>
</itemizedlist>

Visibility is provided to the standard library package via a
<command>use</command> clause; references to items declared in the
<classname>Output</classname> package must be fully qualified.

<src:fragment id="ping-pkg-body">
with
   Ada.Strings.Unbounded,
   Ada.Text_IO,
   Config,
   IRC,
   Output;

use
   Ada.Strings.Unbounded,
   Ada.Text_IO;

package body Ping is
<src:fragref linkend="ping-task-body"/>
end Ping;
</src:fragment>
</para>

<para>
The ping task's package spec is similar to that of <link
linkend="input-task">the input task</link>; they are both a little different
from the specs of the other task packages.  Since the command task needs to be
able to abort the ping task when a <quote>quit</quote> command is processed,
it needs a way to identify the ping task to the <command>abort</command>
statement.  Thus the ping and input task package's specs declare a task type,
and a variable of that type, instead of the anonymous task types of most of
the other tasks.  In addition, the ping task has an entry, used by the input
task to signal the arrival of input.

<src:fragment id="ping-pkg-spec">
package Ping is
   task type Ping_Task_Type is
      entry Input_Received;
   end Ping_Task_Type;
   Ping_Task:  Ping_Task_Type;
end Ping;
</src:fragment>
</para>
</section>
</section>

</article>
